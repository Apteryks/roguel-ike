;;; roguel-ike-stats.el --- Statistics system

;; Copyright (C) 2014 Steven Rémot

;;; Author: Steven Rémot

;;; License:
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;; The entity's statistics are contained in a stat class.
;; This class has a set of slots, which contains a current value and
;; a maximum value.

;;; Code:

(require 'eieio)

;;;;;;;;;;
;; Slot ;;
;;;;;;;;;;

(defclass rlk--stats-slot ()
  ((max-value :initarg :max-value
              :type number
              :reader get-max-value
              :writer set-max-value
              :protection :private
              :documentation "The maximum value of the statistic.")
   (current-value :type number
                  :protection :private
                  :documentation "The current value of the statistic.
Cannot be out of the range 0 - max-value."))
  "Statistic slot.
Handle maximum value and current value.")

(defmethod get-current-value ((self rlk--stats-slot))
  "Return the current slot value.
Set it to max-value if not set yet."
  (unless (slot-boundp self 'current-value)
    (set-current-value self (get-max-value self)))
  (oref self current-value))

(defmethod set-current-value ((self rlk--stats-slot) current-value)
  "Set the current slot value.
Restrain it to the range 0 - max-value."
  (oset self current-value
        (cond ((< current-value 0)
               0)
              ((> current-value (get-max-value self))
               (get-max-value self))
              (t
               current-value))))

;;;;;;;;;;;;;;;;;
;; Stats class ;;
;;;;;;;;;;;;;;;;;

(defclass rlk--stats ()
  ((slots :initarg :slots
          :type list
          :protection :private
          :documentation "An associated list whose keys are slot names and values are slots."))
   "Entity's statistics.")

(defmethod initialize-instance ((self rlk--stats) slots)
  "Initialize the slots."
  (let ((stat-slots '())
        (slot-names '(:health
                      :stamina
                      :strength
                      :constitution
                      :speed
                      :spirit)))
    (dolist (name slot-names)
      (add-to-list 'stat-slots
                   (cons name
                         (rlk--stats-slot (format "%s slot" name)
                                                :max-value (plist-get  slots name)))))
  (call-next-method self (list :slots stat-slots))))

(defmethod get-slot ((self rlk--stats) slot)
  "Return the slot named SLOT."
  (cdr (assoc slot (oref self slots))))

;;;;;;;;;;;;;;;;;
;; Regenerator ;;
;;;;;;;;;;;;;;;;;

(defclass rlk--stats-regenerator ()
  ((stats :initarg :stats
          :type rlk--stats
          :protection :private
          :documentation "Statistics to regenerate.")
   (slots :initarg :slots
          :type list
          :protection :private
          :documentation "Slots to regenrate.")
   (period :initarg :period
           :initform 10
           :type integer
           :protection :private
           :documentation "The number of turns before the regeneration.")
   (count :initform 0
          :type integer
          :protection :private
          :documentation "When count reaches period, a regenration occurs.")
   (rate :initform 0.05
         :type number
         :protection :private
         :documentation "Each stat is regenerated by max(1, max-value * rate)"))
  "Periodically regenerate statistics.")

(defmethod regenerate ((self rlk--stats-regenerator))
  "Regenerate the statistics one time."
  (let ((stats (oref self stats))
        (slot nil)
        (max-value 0)
        (current-value 0)
        (rate (oref self rate)))
    (dolist (slot-name (oref self slots))
      (setq slot (get-slot stats slot-name))
      (setq current-value (get-current-value slot))
      (setq max-value (get-max-value slot))
      (when (< current-value max-value)
        (set-current-value slot (+ current-value (max 1 (* rate max-value))))))))

(defmethod add-turns ((self rlk--stats-regenerator) nb-turns)
  "Add NB-TURNS in the turns count, and regenerate the period is reached."
  (let ((period (oref self period)))
    (oset self count (+ (oref self count) nb-turns))
    (while (>= (oref self count) period)
      (regenerate self)
      (oset self count (- (oref self count) period)))))

(provide 'roguel-ike-stats)

;;; roguel-ike-stats.el ends here
